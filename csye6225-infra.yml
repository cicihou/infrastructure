AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225

Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.192.0.0/16"
  Subnet1CIDR:
    Description: IP range (CIDR notation)
    Type: String
    Default: "10.192.10.0/24"
  Subnet2CIDR:
    Type: String
    Default: "10.192.11.0/24"
  Subnet3CIDR:
    Type: String
    Default: "10.192.12.0/24"
  Subnet1AZ:
    Description: Zone 1, !Select [ 0, !GetAZs '' ]
    Type: String
    Default: "us-east-1a"
  Subnet2AZ:
    Description: Zone 2, !Select [ 1, !GetAZs '' ]
    Type: String
    Default: "us-east-1b"
  Subnet3AZ:
    Description: Zone 3, !Select [ 2, !GetAZs '' ]
    Type: String
    Default: "us-east-1c"
  AmiID:
    Description: the ami id, you will get it after you run packer
    Type: String
    Default: "ami-0c7e19d6e3d49353f"
  KeyName:
    Description: the keypair name you import to aws
    Type: AWS::EC2::KeyPair::KeyName
    Default: "aws-us-east-1"
  MasterUserPassword:
    Type: String
    NoEcho: true
    Default: "mysql1234"
  RDSSubnet1AZ:
    Type: String
    Default: "us-east-1d"
  RDSSubnet2AZ:
    Type: String
    Default: "us-east-1e"
  RDSSubnet3AZ:
    Type: String
    Default: "us-east-1f"
  RDSSubnet1CIDR:
    Type: String
    Default: "10.192.13.0/24"
  RDSSubnet2CIDR:
    Type: String
    Default: "10.192.14.0/24"
  RDSSubnet3CIDR:
    Type: String
    Default: "10.192.15.0/24"


Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet1CIDR
      AvailabilityZone: !Ref Subnet1AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: true
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2CIDR
      AvailabilityZone: !Ref Subnet2AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: true
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3CIDR
      AvailabilityZone: !Ref Subnet3AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: true
  mySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet1
      RouteTableId:
        Ref: PublicRouteTable
  mySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet2
      RouteTableId:
        Ref: PublicRouteTable
  mySubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet3
      RouteTableId:
        Ref: PublicRouteTable
  ApplicationSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to client host
      GroupName: application
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22928
          ToPort: 22928
          CidrIp: 0.0.0.0/0
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo chmod 777 /home/ubuntu/env
            echo -e "DB_HOST=${RDSDBInstance.Endpoint.Address}" >> env
            echo -e "DB_USERNAME=${MasterUserPassword}" >> env
            echo -e "S3_BUCKET=${S3Bucket}" >> env
            WEBAPP_ENV=prod python3 /home/ubuntu/manage.py db stamp head
            WEBAPP_ENV=prod python3 /home/ubuntu/manage.py db migrate
            WEBAPP_ENV=prod python3 /home/ubuntu/manage.py db upgrade
            sudo systemctl daemon-reload
            sudo systemctl enable python.service
            sudo systemctl restart python.service
            sudo systemctl status python.service
            sudo journalctl -u python.service -f
      ImageId: !Ref AmiID
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      IamInstanceProfile: !Ref IAMInstanceProfile
      DisableApiTermination: false
      SubnetId: !Ref mySubnet1
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: "50"
            VolumeType : "gp2"
            DeleteOnTermination: "true"
  RDSDBInstance:
    Properties:
      Engine: "MySQL"
      EngineVersion: "8.0.30"
      DBInstanceClass: "db.t3.micro"
      MultiAZ: "false"
      DBInstanceIdentifier: "csye6225"
      MasterUsername: "csye6225"
      MasterUserPassword: !Ref MasterUserPassword
      DBSubnetGroupName: !Ref myDBSubnetGroup
      PubliclyAccessible: "false"
      DBName: "csye6225"
      AllocatedStorage: "50"
#      Iops: gp2
#      DBSecurityGroups: !Ref DatabaseSecurityGroup
      VPCSecurityGroups: [!Ref DatabaseSecurityGroup]
      DBParameterGroupName: !Ref RDSDBParameterGroup
    Type: 'AWS::RDS::DBInstance'
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample MySQL Parameter Group
      Family: mysql8.0
  RDSSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref RDSSubnet1CIDR
      AvailabilityZone: !Ref RDSSubnet1AZ
  RDSSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref RDSSubnet2CIDR
      AvailabilityZone: !Ref RDSSubnet2AZ
  RDSSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref RDSSubnet3CIDR
      AvailabilityZone: !Ref RDSSubnet3AZ
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
#  PrivateRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      InstanceId: !Ref RDSDBInstance
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RDSSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RDSSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RDSSubnet3
      RouteTableId: !Ref PrivateRouteTable
  myDBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds:
        - !Ref RDSSubnet1
        - !Ref RDSSubnet2
        - !Ref RDSSubnet3
    Type: "AWS::RDS::DBSubnetGroup"
#  DatabaseSecurityGroup:
#    Type: AWS::RDS::DBSecurityGroup
#    Properties:
#      EC2VpcId: !Ref myVPC
#      DBSecurityGroupIngress:
#        - EC2SecurityGroupName:
#            Ref: "ApplicationSecurityGroup"
#      GroupDescription: "DB"
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for DB
      GroupName: database
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
#          CidrIp: 0.0.0.0/0  # the ip should from application
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: "Delete"
    Properties:
      BucketName:
        !Sub
          - 'webapp-${RandomGUID}'
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Id: Rule for webapp s3
#            ExpirationInDays: 30
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: "EC2-CSYE6225"
      Path: "/"
  RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "WebAppS3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "*"
            Resource: [
                !Sub "arn:aws:s3:::${S3Bucket}",
                !Sub "arn:aws:s3:::${S3Bucket}/*",
              ]
      Roles:
        - Ref: "IAMRole"
  IAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: "IAMRole"


Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref myVPC
  SubnetId1:
    Description: The Subnet ID
    Value: !Ref mySubnet1
  SubnetId2:
    Description: The Subnet ID
    Value: !Ref mySubnet2
  SubnetId3:
    Description: The Subnet ID
    Value: !Ref mySubnet3
  RDSSubnet1:
    Value: !Ref RDSSubnet1
  RDSSubnet2:
    Value: !Ref RDSSubnet2
  RDSSubnet3:
    Value: !Ref RDSSubnet3
  EC2Instance:
    Description: The instance ID
    Value: !Ref EC2Instance
  ApplicationSecurityGroup:
    Description: The SG ID
    Value: !Ref ApplicationSecurityGroup
#  MyBucketName:
#    Value: !Ref 'S3Bucket'
